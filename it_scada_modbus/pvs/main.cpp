//***************************************************************************
//                          main.cpp  -  description
//                             -------------------
//  begin            : Do Jan 17 17:06:13 2008
//  generated by     : pvdevelop (C) 2000-2007 by Lehrig Software Engineering
//  email            : lehrig@t-online.de
//***************************************************************************

// include headers for socket management
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <unistd.h>
#include <netdb.h>
#include <sys/socket.h>

// include other headers
#include "pvapp.h"
#include "master_exec.h"
extern "C" {
  #include "../helpers/TCP_Wrapper.h"
}

// defines
#define PVS_PORT 5555
#define PRIME_TCP_BASE_PORT 7102
#define NUM_CLIENTS 4
#define NUM_SERVERS 4

// global variables
int My_Client_ID;
int My_Server_ID;
int Client_Port;
int My_Address = -1;
char ip_str[16] = "";
int dad_sock, prime_sock;

// Thread that manages socket connections
void *sock_connection(void *arg) {
  int o_sock, i;
  fd_set active_fd_set, read_fd_set;
  struct sockaddr_in dad_conn;
  socklen_t size;

  if(arg != NULL)
    return NULL;

  // Init data structures for select()
  o_sock = passiveTCPsock(PVS_PORT + My_Server_ID, 5);
  prime_sock = activeTCPsock((const char *)ip_str, Client_Port);
  FD_ZERO(&active_fd_set);
  FD_SET(o_sock, &active_fd_set);
  FD_SET(prime_sock, &active_fd_set);
  dad_sock = -1;

  // Init master
  Init_Master();

  while(1) {
    // Handle incoming DAD connections and messages
    read_fd_set = active_fd_set;
    if(select(FD_SETSIZE, &read_fd_set, NULL, NULL, NULL) > 0) {
      for(i = 0; i < FD_SETSIZE; i++) {
        if(FD_ISSET(i, &read_fd_set)) {
          if(i == o_sock) {
            // accept incoming connection only if there's no DAD connected yet
            if(dad_sock == -1) {
              size = sizeof(dad_conn);
              dad_sock = accept(o_sock, (struct sockaddr *)&dad_conn, &size);
              if(dad_sock < 0) {
                perror("Connection request refused");
                exit(EXIT_FAILURE);
              }
              FD_SET(dad_sock, &active_fd_set);
            }
          }
          // Message from DAD or Prime
          else {
            if(Read_Message(i) < 0) {
              close(i);
              FD_CLR(i, &active_fd_set);
            }
          }
        }
      }
    }
  }
}

/* Read input parameters for connection to Prime server */
void Print_Usage() {
  printf("Usage: ./client\n"
	"\t -l IP (A.B.C.D) \n"
        "\t -i client_id, indexed base 1\n"
	"\t[-s server_id, indexed base 1]\n");

  exit(0);
}

void Usage(int argc, char **argv) {
  int i1, i2, i3, i4;
  int tmp;

  My_Client_ID   =  0;
  My_Server_ID   =  0;

  while(--argc > 0) {
    argv++;
    
    /* [-l A.B.C.D] */
    if((argc > 1) && (!strncmp(*argv, "-l", 2))) {
      sscanf(argv[1], "%s", ip_str);
      sscanf( ip_str ,"%d.%d.%d.%d",&i1, &i2, &i3, &i4);
      My_Address = ( (i1 << 24 ) | (i2 << 16) | (i3 << 8) | i4 );
      argc--; argv++;
    }
    /* [-i client_id] */
    else if((argc > 1)&&(!strncmp(*argv, "-i", 2))) {
      sscanf(argv[1], "%d", &tmp);
      My_Client_ID = tmp;
      if(My_Client_ID > NUM_CLIENTS || My_Client_ID <= 0) {
	printf("Client ID must be between 1 and %d\n", NUM_CLIENTS);
	exit(0);
      }
      My_Server_ID = My_Client_ID;
      argc--; argv++;
    }
    /* [-s server_id] (if different from My_ClientID) */
    else if((argc > 1)&&(!strncmp(*argv, "-s", 2))) {
      sscanf(argv[1], "%d", &tmp);
      My_Server_ID = tmp;
      if(My_Server_ID > NUM_SERVERS || My_Server_ID <= 0) {
	printf("Server ID must be between 1 and %d\n", NUM_SERVERS);
	exit(0);
      }
      argc--; argv++;
    }
    else {
      Print_Usage();
    }
  }

  /* Both -l and -i arguments are mandatory */
  if(My_Client_ID == 0 || My_Address == -1)
    Print_Usage();

  /* Port is computed as a function of the client id */
  Client_Port = PRIME_TCP_BASE_PORT + My_Client_ID;

  printf("Prime client %d, IP = %s, Port = %d\n", My_Client_ID, ip_str, Client_Port);

  /* Seed the random number generator */
  srand(My_Client_ID);
}

int pvMain(PARAM *p) {
  int ret;

  pvSetCaption(p,"pvs");
  pvResize(p,0,1280,1024);
  //pvScreenHint(p,1024,768); // this may be used to automatically set the zoomfactor
  ret = 1;
  pvGetInitialMask(p);
  if(strcmp(p->initial_mask,"mask1") == 0) ret = 1;

  while(1) {
    switch(ret) {
      case 1:
        pvStatusMessage(p,-1,-1,-1,"mask1");
        ret = show_mask1(p);
        break;
      default:
        return 0;
    }
  }
}

#ifdef USE_INETD
int main(int ac, char **av) {
  PARAM p = NULL;

  Usage(ac, av);
  pthread_t tid;
  pthread_create(&tid, NULL, &sock_connection, NULL);

  pvInit(0, NULL, &p);
  p.port = p.port + My_Server_ID;
  /* here you may interpret ac,av and set p->user to your data */
  pvMain(&p);
  return 0;
}
#else  // multi threaded server
int main(int ac, char **av) {
  PARAM p;
  int   s;

  Usage(ac, av);
  pthread_t tid;
  pthread_create(&tid, NULL, &sock_connection, NULL);

  pvInit(0, NULL, &p);
  p.port = p.port + My_Server_ID;
  /* here you may interpret ac,av and set p->user to your data */
  while(1)
  {
    s = pvAccept(&p);
    if(s != -1) pvCreateThread(&p,s);
    else        break;
  }
  return 0;
}
#endif
