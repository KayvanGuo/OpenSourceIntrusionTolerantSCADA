/*
 * scada_packets.h contains the definition of data strucures and 
 * methods used to build the messages exchanged by Process View Server 
 * and Data Acquisition Daemon through sockets.
 *
 * Creator: Marco
 * Created: 3/18/2015
 * Last modified: 3/27/2015
 */

/*
 * Message types:
 *   DUMMY_MESS = dummy
 *   READ_DATA = message sent from a Data Acquisition Daemon to the Process View Server
 *   FEEDBACK = message sent from the Process View Server to the Data Acquisition Daemon
 */
enum message_types {DUMMY_MESS, READ_DATA, FEEDBACK};

/*
 * Protocols used in pvbrowser:
 *   DUMMY_PROT = dummy
 *   DNP3 is currently not implemented
 */
enum protocol_types {DUMMY_PROT, MODBUS_TCP, MODBUS_SERIAL, SIEMENS_TCP, SIEMENS_PPI,
                     ETHERNET_IP, EIBNET_KNX, OPC_XML_DA, PROFIBUS, CAN, DNP3};

/*
 * Type of variables used in Modbus TCP:
 *   INPUT_REGISTERS = 16-bit word, read-only
 *   HOLDING_REGISTERS = 16-bit word, read-write
 *   INPUT_STATUS = 1 bit, read-only
 *   COIL_STATUS = 1 bit, read-write
 */
enum modbus_var_types {INPUT_REGISTERS, HOLDING_REGISTERS, INPUT_STATUS, COIL_STATUS};

/* Header of a message exchanged by Process View Server and Data Acquisition Daemon */
typedef struct dummy_scada_message {
  unsigned int seq_num;       // local sequence number
  unsigned short sender_id;   // sender id
  unsigned int len;           // length of the following content
  unsigned int type;          // type of message
  unsigned int prot;          // type of protocol
// content follows
} scada_message;

/* Modbus TCP message */
typedef struct dummy_modbus_tcp_mess {
  unsigned int var;           // type of variable
  unsigned int slave_id;      // RTU id
  unsigned int start_add;     // starting RTU register address
  int value;                  // value read from RTU
} modbus_tcp_mess;

scada_message *PKT_Construct_Scada_Mess();
scada_message *PKT_Construct_Modbus_TCP_Mess(int, unsigned int, unsigned int, unsigned int, int);
int Var_Type_To_Int(char[]);
char[] Var_Type_To_String(int);

